(call *registry*
      (cns-update 'convex.run.key-pair
                  *address*))


(call *registry*
      (register {:description ["Creating and managing key pairs required for signing transactions."
                               "See"]
                 :name        "Key pair management"}))


;;;;;;;;;; Private


(defn -blob-32?

  ^{:private true}

  [x]

  (and (blob? x)
       (= (count x)
          32)))


;;;;;;;;;; Predicate functions


(defn key-pair?

  ^{:doc {:description ["Returns true if the given argument looks like a key pair."
                        "Returns false otherwise."]
          :signature [{:params [x]}]}}

  [key-pair]

  (and (vector? key-pair)
       (= (count key-pair)
          2)
       (let [[blob-1
              blob-2] key-pair]
         (and (public-key? blob-1)
              (private-key? blob-2)))))



(defn non-empty-string?

  ^{:doc {:description ["Returns true if the given argument is a non-empty string."
                        "Returns false othewise"]
          :signature   [{:params [x]}]}}

  [x]

  (and (str? x)
       (not (empty? x))))



(defn private-key?

  ^{:doc {:description ["Returns true if the given argument looks like a private key."
                        "Returns false otherwise."]
          :signature [{:params [x]}]}}

  [x]

  (and (blob? x)
       (= (count x)
          48)))



(defn public-key?

  ^{:doc {:description ["Returns true if the given argument looks like a public key."
                        "Returns false otherwise."]
          :signature [{:params [x]}]}}

  [x]

  (-blob-32? x))


;;;;;;;;;; Creating key pairs


(defn from-seed

  ^{:doc       ["Computes a key pair from a seed (i.e. a 32-byte blob)."
                "See `gen` for a definition of a key-pair."]
    :signature [{:params [seed]}]}

  [seed]

  (assert (-blob-32? seed))
  [:cvm.sreq :kp.from-seed seed])



(defn gen

  ^{:doc {:description ["Returns a vector representing an ED25519 key pair."
                        "First item is the public key, second item is the private key."]
          :signature   [{:params []}]}}

  []

  [:cvm.sreq :kp.gen])


;;;;;;;;;; Retrieving information from key pairs

(defn private-key

 ^{:doc {:description ["Returns the private key of the given `key-pair`."]
         :signature   [{:params [key-pair]}]}}

  [key-pair]

  (second key-pair))



(defn public-key

 ^{:doc {:description ["Returns the public key of the given `key-pair`."]
         :signature   [{:params [key-pair]}]}}

  [key-pair]

  (first key-pair))



(defn seed

  ^{:doc {:description ["Returns the seed of the given key pair."
                        "See `gen` for key pair format, `from-seed` for seed definition."]
          :signature   [{:params [key-pair]}]}}

  [key-pair]

  (assert (key-pair? key-pair))
  [:cvm.sreq :kp.seed key-pair])


;;;;;;;;;; Key store operations


(defn from-store

  ^{:doc {:description ["Retrieves a passphrase-protected key pair by alias from a passphrase-protected store located at the given path."
                        "Passphrases and alias must be strings with at least 1 character."]
          :signature   [{:params [path passphrase-store alias-key-pair passphrase-key-pair]}]}}

  [path passphrase-store alias-key-pair passphrase-key-pair]

  (assert (non-empty-string? path))
  (assert (non-empty-string? passphrase-store))
  (assert (non-empty-string? alias-key-pair))
  (assert (non-empty-string? passphrase-key-pair))
  [:cvm.sreq :kp.from-store path passphrase-store alias-key-pair passphrase-key-pair])



(defn save

  ^{:docÂ {:description ["Saves a key pair by alias, protected by a passphrase, to a store located at the given path, passphrase-protected as well."
                        "It can be retrieved using `from-store`."
                        "Passphrases and alias must be strings with at least 1 character."]
          :signature   [{:params [path passphrase-store alias-key-pair key-pair passphrase-key-pair]}]}}

  [path passphrase-store alias-key-pair key-pair passphrase-key-pair]

  (assert (non-empty-string? path))
  (assert (non-empty-string? passphrase-store))
  (assert (non-empty-string? alias-key-pair))
  (assert (key-pair? key-pair))
  (assert (non-empty-string? passphrase-key-pair))
  [:cvm.sreq :kp.save path passphrase-store alias-key-pair key-pair passphrase-key-pair])
