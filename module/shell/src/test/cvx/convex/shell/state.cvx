{}


;;;;;;;;;;


(.t.def ..state.core.vanilla

  (def core.genesis
       (get-in (.state.genesis)
               [:accounts
                (long .account.core)]))

  (def core
       (get-in (.state.core.vanilla *state*)
               [:accounts
                (long .account.core)]))

  (.t.is (= (:environment core.genesis)
            (:environment core))
         "Environment")

  (.t.is (= (:metadata core.genesis)
            (:metadata core))
         "Metadata")

  (.t.is (.t.ex :ARGUMENT
                (.state.core.vanilla :fail))
         "Not a State"))



(.t.def ..state.do


  (.t.is (= true
            (.state.do (fn []
                         (def a
                              :a)))))

  (.t.is (= :a
            a)
         "State preserved on success")

  (.t.is (= false
            (.state.do (fn []
                         (def a
                              :b)
                         (fail :FROM-TEST
                               42)))))

  (.t.is (= :a
            a)
         "State reverted on failure"))



(.t.def ..state.do*


  (.t.is (= true
            (.state.do*
              (def a
                   :a))))

  (.t.is (= :a
            a)
         "State preserved on success")

  (.t.is (= false
            (.state.do* 
              (def a
                   :b)
              (fail :FROM-TEST
                    42))))

  (.t.is (= :a
            a)
         "State reverted on failure"))



(.t.def ..state.genesis

  (.t.is (= (.state.genesis)
            (.state.genesis {:peer+ [{:key (.kp.pubkey (.kp.create .account.0-key))}]}))
         "Default public key")

  (.t.is (.t.ex :ARGUMENT
                (.state.genesis {:peer+ []}))
         "Missing keys")

  (.t.is (.t.ex :ARGUMENT
                (.state.genesis {:peer+ [{:key .account.0-key}
                                         {:key .account.0-key}]}))
         "Duplicate keys")

  (.t.is (.t.ex :ARGUMENT
                (.state.genesis {:peer+ [{:key .account.0-key}
                                         {:key 0x12}]}))
         "Bad key")

  (.t.is (.t.ex :ARGUMENT
                (.state.genesis {:peer+ [{:key 42}]}))
         "Random argument")

  (def pubkey-1
       (.gen (.gen.blob-32)))

  (def pubkey-2
       (.gen (.gen.blob-32)))

  (def state
       (.state.genesis {:peer+ [{:key pubkey-1}
                                {:host  "foo"
                                 :key      pubkey-2
                                 :metadata {:region 2}
                                 :port     42
                                 :stake    10}]}))

  (def peer+
       (:peers state))

  (.t.is (= 2
            (count peer+))
         "Only 2 peers declared as expected")

  (def peer-1
       (get peer+
            pubkey-1))

  (.t.is (= "localhost:18888"
            (:url (:metadata peer-1)))
         "Default URL for peer 1")

  (def peer-2
       (get peer+
            pubkey-2))

  (.t.is (= {:region 2
             :url    "foo:42"}
            (:metadata peer-2))
         "Metadata peer 2")

  (.t.is (= 10
            (:stake peer-2))
         "Custom stake for peer 2"))



(.t.def ..state.safe


  (.t.is (= [true
             :a]
            (.state.safe (fn []
                           (def a
                                :a)))))

  (.t.is (= :a
            a)
         "State preserved on success")


  (def failure
       (.state.safe (fn []
                      (def a
                           :b)
                      (fail :FROM-TEST
                            42))))
       
  (.t.is (= false
            (first failure)))

  (.t.is (= :a
            a)
         "State reverted on failure")

  (.t.is (.t.ex :FROM-TEST
                (.ex.rethrow (second failure)))
         "Exception was properly captured")

  (.t.is (.t.ex :ARITY
                (.ex.rethrow (second (.state.safe (fn [_x])))))
         "Must be no-arg function")

  (.t.is (.t.ex :ARGUMENT
                (.state.safe 42))
         "Random argument"))



(.t.def ..state.safe*


  (.t.is (= [true
             :a]
            (.state.safe*
              (def a
                   :a))))

  (.t.is (= :a
            a)
         "State preserved on success")


  (def failure
       (.state.safe*
         (def a
              :b)
         (fail :FROM-TEST
               42)))
       
  (.t.is (= false
            (first failure)))

  (.t.is (= :a
            a)
         "State reverted on failure")

  (.t.is (.t.ex :FROM-TEST
                (.ex.rethrow (second failure)))
         "Exception was properly captured"))



(.t.def ..state.tmp


  (.t.is (= [true
             :a]
            (.state.tmp (fn []
                          (def a
                               :a)))))


  (.t.is (not (defined? 'a))
         "State reverted on success")

  (def failure
       (.state.tmp (fn []
                     (def a
                          :b)
                     (fail :FROM-TEST
                           42))))
       
  (.t.is (= false
            (first failure)))

  (.t.is (not (defined? 'a))
         "State reverted on failure")

  (.t.is (.t.ex :FROM-TEST
                (.ex.rethrow (second failure)))
         "Exception was properly captured")

  (.t.is (.t.ex :ARITY
                (.ex.rethrow (second (.state.tmp (fn [_x])))))
         "Must be no-arg function")

  (.t.is (.t.ex :ARGUMENT
                (.state.tmp 42))
         "Random argument"))



(.t.def ..state.tmp*


  (.t.is (= [true
             :a]
            (.state.tmp*
              (def a
                   :a))))


  (.t.is (not (defined? 'a))
         "State reverted on success")

  (def failure
       (.state.tmp*
         (def a
              :b)
         (fail :FROM-TEST
               42)))
       
  (.t.is (= false
            (first failure)))

  (.t.is (not (defined? 'a))
         "State reverted on failure")

  (.t.is (.t.ex :FROM-TEST
                (.ex.rethrow (second failure)))
         "Exception was properly captured"))
