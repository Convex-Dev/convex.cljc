;;
;;
;; Testing `convex.shell.db`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;; Test suites


(defn suite.ops

  ^{:doc {:description "Common operations."}}

  []

  (T/group '((T/path.conj 'ops)

             ($.file/!.tmp)
             (def path
                  $/*result*)

             ($.db/!.open path)
             nil

             ($.db/!.path)
             (T/trx '(= $/*result*
                        path)
                    {:description "Path matches the open instance."})

             (def cell
                  [:this 'is \a "cell" 42 {:key #{42.42}}])

             (def cell-hash
                  (hash (encoding cell)))

             ($.db/!.write cell)
             (T/trx '(= $/*result*
                        cell-hash))

             ($.db/!.read cell-hash)           
             (T/trx '(= $/*result*
                        cell)
                    {:description "Read by hash"})

             (def cell-2
                  (conj cell
                        :root))

             ($.db/!.root.write cell-2)
             (T/trx '(= $/*result*
                        (hash (encoding cell-2)))
                    {:description "Root write"})

             ($.db/!.root.read)
             (T/trx '(= $/*result*
                        cell-2)
                    {:description "Root read"}))))



(defn suite.read-only

 ^{:doc {:description "Read-only mode."}}

 []

 (T/group '((T/path.conj 'read-only)

            (def cell
                 [:test 1 2 3])

            (def cell-hash
                 (hash (encoding cell)))

            ($.db/!.read-only?)
            (T/trx '(not $/*result*)
                   {:description "Disabled by default."})

            (T/group '((T/path.conj 'enable)

                       ($.db/!.read-only true)
                       (T/trx '(nil? $/*result*)
                              {:description "Setting the mode returns nil."})
                       
                       ($.db/!.read-only?)
                       (T/trx '$/*result*
                              {:description "Mode enabled."})


                       (T/fail.code #{:DB}
                                   '($.db/!.write cell)
                                   {:description "Writing fails."})

                       ($.db/!.read cell-hash)
                       (T/trx '(nil? $/*result*)
                              {:description "Cell was not written."})

                       (T/fail.code #{:DB}
                                   '($.db/!.root.write cell)
                                   {:description "Writing to root fails."})

                       ($.db/!.root.read)
                       (T/trx '(not (= $/*result*
                                       cell))
                              {:description "Cell was not written to root."})))

            (T/group '((T/path.conj 'disable)

                       ($.db/!.read-only false)
                       ($.db/!.read-only?)
                       (T/trx '(not $/*result*)
                              {:description "Mode disabled."})

                       ($.db/!.write cell)
                       ($.db/!.read cell-hash)
                       (T/trx '(= $/*result*
                                  cell)
                              {:description "Write went through."})

                       ($.db/!.root.write cell)
                       ($.db/!.root.read)
                       (T/trx '(= $/*result*
                                  cell)
                              {:description "Write to root went through."}))))))


;;;


(defn suite.main

  []

  (T/group '((T/path.conj 'convex.shell.db)
             (suite.ops)
             (suite.read-only))))


;;;


(suite.main)
(T/print "convex.shell.db")
