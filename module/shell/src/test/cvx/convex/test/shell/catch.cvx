;;
;;
;; Testing `convex.shell.catch`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.low-level

  ^{:doc {:description "Testing low-level pushing and popping."}}

  []

  (T/group '((T/path.conj 'low-level)

             (def handler-1
                  '(def foo
                        :handler-1))

             (T/trx '(query (and (= handler-1
                                    ($.catch/push handler-1))
                                 (= handler-1
                                    (first $.catch/*stack*))))
                    {:description "Push."})

             (T/trx '(let [stack $.catch/*stack*
                           res   (do
                                   ($.catch/push handler-1)
                                   ($.catch/drop))]
                       (and (= handler-1
                               res)
                            (= stack
                               $.catch/*stack*)))
                    {:description "Drop."})

              (T/trx '(query (let [stack $.catch/*stack*
                                   trx+  $.trx/*list*]
                               ($.catch/push handler-1)
                               ($.catch/pop)
                               (= (cons handler-1
                                        trx+)
                                  $.trx/*list*)))
                     {:description "Pop."})


              (T/group '((T/path.conj 'catching)

                         ($.catch/push handler-1)

                         ($.catch/push '(assert false))

                         (assert false)

                         (T/trx '(= :handler-1
                                    foo)
                                {:description "Error bubbled to non-failing handler."}))))))



(defn suite.safe

  ^{:doc {:description "Testing `safe`."}}

  []

  (T/group '((T/path.conj 'safe)

             (T/group '((T/path.conj "Success without catch nor finally.")
                        ($.catch/!.safe '(inc 42))
                        (T/trx '(= $/*result*
                                   43)
                               {:description "Trial executed normally."})))

             (T/group '((T/path.conj "Fail without catch nor finally.")
                        (T/fail.code #{:ASSERT}
                                     '($.catch/!.safe '(assert false))
                                     {:description "Exception is thrown normally."})))

             (T/group '((T/path.conj "Success with catch.")
                        ($.catch/!.safe '(inc 42)
                                        '(def x-catch
                                              :catch))
                        (T/trx '(= $/*result*
                                   43)
                               {:description "Result comes from trial"})
                        (T/trx '(not (defined? x-catch))
                               {:description "Catch is not executed."})))

             (T/group '((T/path.conj "Fail with catch.")
                        ($.catch/!.safe '(assert false)
                                        '{:catch $/*result*})
                        (T/trx '(= (:code (:catch $/*result*))
                                   :ASSERT)
                               {:description "Exception as result in catch."})))

             (T/group '((T/path.conj "Success with finally.")
                        ($.catch/!.safe '(inc 42)
                                        nil
                                        '(do
                                           (def x-finally
                                                {:finally $/*result*})
                                           :finally))
                        (T/trx '(= $/*result*
                                   43)
                               {:description "Result comes from trial."})
                        (T/trx '(= (:finally x-finally)
                                   43)
                               {:description "Finally was executed."})))

             (T/group '((T/path.conj "Fail with finally.")
                        (T/fail.code #{:ASSERT}
                                     '($.catch/!.safe '(assert false)
                                                      nil
                                                      '(do
                                                         (def x-finally
                                                              {:finally $/*result*})
                                                         :finally))
                                     {:description "Exception rethrown."})
                        (T/trx '(= (:code (:finally x-finally))
                                   :ASSERT)
                               {:description "Finally was executed."})))

             (T/group '((T/path.conj "Success with catch and finally.")
                        ($.catch/!.safe '(inc 42)
                                        '(def x-catch
                                              {:catch $/*result*})
                                        '(do
                                           (def x-finally
                                               {:finally $/*result*})
                                           :finally))
                        (T/trx '(= $/*result*
                                   43)
                               {:description "Result comes from trial."})
                        (T/trx '(not (defined? x-catch))
                               {:description "Catch is never executed."})
                        (T/trx '(= (:finally x-finally)
                                   43)
                               {:description "Finally was executed."})))

             (T/group '((T/path.conj "Fail with catch and finally.")
                        ($.catch/!.safe '(assert false)
                                        '(do
                                           (def x-catch
                                                {:catch $/*result*})
                                           :catch)
                                        '(do
                                           (def x-finally
                                                {:finally $/*result*})
                                           :finally))
                        (T/trx '(= $/*result*
                                   :catch)
                               {:description "Result comes from catch."})
                        (T/trx '(= (:code (:catch x-catch))
                                   :ASSERT)
                               {:description "Exception as result in catch."})
                        (T/trx '(= (:finally x-finally)
                                   :catch)
                               {:description "Finally executed with result from catch."}))))))



;;;


(defn suite.main

  ^{:doc {:description "Main test suite."}}

  []

  (T/group '((T/path.conj 'convex.shell.account)
             (suite.low-level)
             (suite.safe))))


;;;


(suite.main)
(T/print "convex.shell.catch")
