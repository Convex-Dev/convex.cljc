;;
;;
;; Testing `convex.shell.catch`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.low-level

  ^{:doc {:description "Testing low-level pushing and popping."}}

  []

  (T/group '((T/path.conj 'low-level)

             (def handler-1
                  '(def foo
                        :handler-1))

             (T/trx '(query (and (= handler-1
                                    ($.catch/push handler-1))
                                 (= handler-1
                                    (first $.catch/*stack*))))
                    {:description "Push."})

             (T/trx '(let [stack $.catch/*stack*
                           res   (do
                                   ($.catch/push handler-1)
                                   ($.catch/drop))]
                       (and (= handler-1
                               res)
                            (= stack
                               $.catch/*stack*)))
                    {:description "Drop."})

              (T/trx '(query (let [stack $.catch/*stack*
                                   trx+  $.trx/*list*]
                               ($.catch/push handler-1)
                               ($.catch/pop)
                               (= (cons handler-1
                                        trx+)
                                  $.trx/*list*)))
                     {:description "Pop."})


              (T/group '((T/path.conj 'catching)

                         ($.catch/push handler-1)

                         ($.catch/push '(assert false))

                         (assert false)

                         (T/trx '(= :handler-1
                                    foo)
                                {:description "Error bubbled to non-failing handler."}))))))



(defn suite.safe

  ^{:doc {:description "Testing `safe`."}}

  []

  (T/group '((T/path.conj 'safe)

             (T/group '((T/path.conj 'success)

                        ($.catch/!.safe '(def x
                                              :try)
                                        '(def x-err
                                              :catch)
                                        '(def x-finally
                                              :finally))

                        (T/trx '(= $/*result*
                                   :try)
                               {:description "Result comes from 'try' in spite of 'finally' being present."})

                        (T/trx '(= x
                                   :try)
                               {:description "Normal transaction executed with access to previous result."})

                        (T/trx '(not (defined? x-err))
                               {:description "Error transaction not executed."})

                        (T/trx '(= x-finally
                                   :finally)
                               {:description "Finally transaction executed."})))

             (T/group '((T/path.conj 'fail)

                        ($.catch/!.safe '($.trx/precat '((def x
                                                              :try-1)
                                                         (assert false)
                                                         (def x
                                                              :try-2)))
                                        '(def x-err
                                              :catch)
                                        '(def x-finally
                                              :finally))

                        (T/trx '(= $/*result*
                                   :catch)
                               {:description "Result comes from 'catch'."})

                        (T/trx '(= x
                                   :try-1)
                               {:description "Before failure, executed."})

                        (T/trx '(= x-err
                                   :catch)
                               {:description "Error transaction executed."})

                        (T/trx '(= x-finally
                                   :finally)
                               {:description "Finally transaction executed."})))

             (T/group '((T/path.conj 'finally-without-catch)

                        ($.catch/!.safe '(assert false)
                                        nil
                                        '(def x-finally
                                              $/*result*))

                        (T/trx '(:exception? $/*result*)
                               {:description "Result comes from 'catch'."})

                        (T/trx '(:exception? x-finally)
                               {:description "'finally' executed with exception as last result."}))))))


;;;


(defn suite.main

  ^{:doc {:description "Main test suite."}}

  []

  (T/group '((T/path.conj 'convex.shell.account)
             (suite.low-level)
             (suite.safe))))


;;;


(suite.main)
(T/print "convex.shell.catch")
