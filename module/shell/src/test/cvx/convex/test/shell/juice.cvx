;;
;;
;; Testing `convex.shell.juice`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.limit

  ^{:doc {:description "Setting and retrieving the default juice limit."}}

  []

  (T/group '((T/path.conj 'limit)

             ($.juice/!.limit)

             (def default-limit
                  $/*result*)

             (T/trx '(>= (- default-limit
                            *juice*)
                         1000)
                    {:description "There should not be a huge difference between the reported juice and the juice limit."})

             ($.catch/!.try '(T/group '((T/path.conj 'limit.set)
                                        ($.juice/!.limit.set 100000)
                                        ($.juice/!.limit)
                                        (T/trx '(= $/*result*
                                                   100000))
                                        (T/fail.code #{:ASSERT}
                                                     '($.juice/!.limit.set 99999)
                                                     {:description "Limit too low."})))
                            nil
                            '($.juice/!.limit.set nil))

             ($.juice/!.limit)
             (T/trx '(= $/*result*
                        default-limit)
                    {:description "Nil limit resets to the max limit."}))))



(defn suite.track

  ^{:doc {:description "Tracking juice consumption."}}

  []

  (T/group '((T/path.conj 'track)

             (def code
                  '(if (< 1 2)
                     :good
                     :bad))
   
             ($.juice/!.track code)
             (do
               (def cost-total
                    (first $/*result*))
               (def result
                    (second $/*result*)))

             (T/group '((T/path.conj 'total)
                        (T/trx '(= result
                                   :good)
                               {:description "Proper result reported."})

                        (T/trx '(> cost-total
                                   0)
                               {:description "Total cost is definitely non-zero."})))

             (T/group '((T/path.conj 'steps)

                        ($.juice/!.track-steps code)
                        (do
                          (def cost-raw
                               (first $/*result*))
                          (def result-raw
                               (second $/*result*)))

                        (T/group '((T/path.conj 'raw)
                                   (T/trx '(= result-raw
                                              :good)
                                          {:description "Proper result reported."})
                                   (T/trx '(and (not (zero? (cost-raw 0)))
                                                (not (zero? (cost-raw 1)))
                                                (not (zero? (cost-raw 2)))
                                                (not (zero? (cost-raw 3))))
                                          {:description "Had to go through all steps."})
                                   (T/trx '(= (cost-raw 3)
                                              cost-total)
                                          {:description "Total reported cost is consistent."})))

                        (T/group '((T/path.conj 'expanded)
                                   ($.juice/!.track-steps (expand code))
                                   (def cost-expanded
                                        (first $/*result*))
                                   (T/trx '(zero? (cost-expanded 0))
                                          {:description "No need for expansion."})
                                   (T/trx '(= (cost-expanded 1)
                                              (cost-raw 1))
                                          {:description "Cost of compilation remains the same."})
                                   (T/trx '(= (cost-expanded 2)
                                              (cost-raw 2))
                                          {:description "Cost of execution remains the same."})
                                   (T/trx '(= (cost-expanded 3)
                                              (- (cost-raw 3)
                                                 (cost-raw 0)))
                                          {:description "Expansion removed from total cost."})))
                        
                        (T/group '((T/path.conj 'compiled)
                                   ($.juice/!.track-steps (compile code))
                                   (def cost-compiled
                                        (first $/*result*))
                                   (T/trx '(zero? (cost-compiled 0))
                                          {:description "No need for expansion."})
                                   (T/trx '(zero? (cost-compiled 1))
                                          {:description "No need for compilation."})
                                   (T/trx '(= (cost-compiled 2)
                                              (cost-raw 2))
                                          {:description "Cost of execution remains the same."})
                                   (T/trx '(= (cost-compiled 3)
                                              (cost-compiled 2))
                                          {:description "Total cost reflects only the cost of execution."}))))))))



(defn suite.main

  ^{:doc {:description "Main test suite."}}

  []

  (T/group '((T/path.conj 'convex.shell.juice)
             (suite.limit)
             (suite.track))))


;;;


(suite.main)
(T/print "convex.shell.juice")
