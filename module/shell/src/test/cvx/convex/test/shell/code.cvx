;;
;;
;; Testing `convex.shell.code`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.decompile

  ^{:doc {:description "Experimental decompilation"}}

  []

  (T/group '((T/path.conj 'decompile)

             ($.code/!.decompile (fn [x] x))
             (T/trx '(= '(fn [x] %0)
                        $/*result*)
                    {:description "Function."})

             ($.code/!.decompile (compile '(+ 2 2)))
             (T/trx `(= $/*result*
                        '((lookup ~*address* +) 2 2))
                    {:description "Compiled op."}))))



(defn suite.read+

  ^{:doc {:description "Convex Lisp reader."}}

  []

  (T/group '((T/path.conj 'read)

             (def a
                  '(+ 2 2))

             (def b
                  '(fn [x] (inc x)))

             ($.code/!.read+ (str a
                                  b))

             (T/trx '(= '((+ 2 2)
                          (fn [x] (inc x)))
                        $/*result*)))))

;;;


(defn suite.main

  []

  (T/group '((T/path.conj 'convex.shell.code)
             (suite.decompile)
             (suite.read+))))


;;;


(suite.main)
(T/print "convex.shell.code")
