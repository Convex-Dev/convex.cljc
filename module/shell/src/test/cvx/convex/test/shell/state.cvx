;;
;;
;; Testing `convex.shell.state`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.load

  ^{:doc {:description ["Loading a state."]}}

  []

  (T/group '((T/path.conj 'convex.shell.state)

             (T/group '((T/path.conj 'load)

                        :another-result
                        ($.state/!.load-continue *state*)
                        (T/trx '(= $/*result*
                                   :another-result)
                               {:descriptionl "`!.load-continue` preserves the last result."})

                        (def a
                             1)

                        (def s
                             *state*)

                        (def b
                             2)

                        ($.state/!.load-continue s
                                                 `(def c
                                                       ~(inc b)))

                        (T/trx '(= $/*result*
                                   3)
                               {:description "Result matches provided transaction."})

                        (T/trx '(= a
                                   1)
                               {:description "`a` is still present."})

                        (T/trx '(not (defined? b))
                               {:description "`b` was not present before saving the state."})

                        (T/trx '(= c
                                   3)
                               {:description "`c` is the result from executing the given transaction."})))

             (T/group '((T/path.conj 'load-with-genesis-state)

                        [:cvm.sreq :dev.genesis-state]

                        ($.state/!.load-continue $/*result*
                                                 `(def s
                                                       (quote ~*state*)))

                        $
                        ($.state/!.load-continue s
                                                 $/*result*)

                        (T/trx '(= $/*result*
                                   $)
                               {:description "It looks like libraries were deployed while loading the genesis state"}))))))



(defn suite.stack

  ^{:doc {:description "Pushing and popping states."}}

  []

  (T/group '((T/path.conj 'stack)

             (T/group '((T/path.conj 'push-drop)

                        (def n
                             (count $.state/*stack*))

                        ($.state/push)
                        (T/trx '(= (count $.state/*stack*)
                                   (inc n))
                               {:description "State has been pushed."})

                        ($.state/drop)
                        (T/trx '(= (count $.state/*stack*)
                                   n)
                               {:description "State has been dropped."})))


             (T/group '((T/path.conj 'push-pop)
                        
                        42
                        ($.state/push)

                        (T/trx '(= $/*result*
                                   42)
                               {:description "Pushing the state returns the last result."})

                        (def foo
                             1000)
                        ($.state/!.pop)
                        
                        (T/trx '(= $/*result*
                                   1000)
                               {:description "Popping the state transfers the last result."})
                        (T/trx '(not (defined? foo))
                               {:description "What happened after pushing the state disppaers on popping."})

                        (T/trx '($.trx/precat '(($.state/push)
                                                (def bar
                                                     100)
                                                ($.state/!.pop `(def baz
                                                                     ~(inc bar)))
                                                (= baz
                                                   101)))
                               {:description "State popped while remembering something."}))))))



(defn suite.with

  ^{:doc {:description "Executing transactions with a temporary state."}}

  []

  (T/group '((T/path.conj 'with)
             
             [:cvm.sreq :dev.genesis-state]
             (def gs
                  $/*result*)

             ($.state/!.with gs
                             '([:result (defined? gs)]))
             (T/trx '(= $/*result*
                        [:result false])
                    {:description "Input state was successfully loaded."})
             (T/trx '(defined? gs)
                    {:description "Original state restored."}))))


;;;


(defn suite.main

  ^{:doc {:description "Suite gathering all other suites."}}

  []

  (T/group '((T/path.conj 'convex.shell.state)
             (suite.load)
             (suite.stack)
             (suite.with))))

;;;


(suite.main)
(T/print "convex.shell.state")
