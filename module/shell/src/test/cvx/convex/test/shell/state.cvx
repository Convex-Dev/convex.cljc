;;
;;
;; Testing `convex.shell.state`.
;;
;;


;;;;;;;;;;


(def T
     $.test)


;;;;;;;;;; Test suites


(defn suite.atomic

  ^{:doc {:description "Restoring state on failure."}}

  []

  (T/group '((T/path.conj 'atomic)

             (T/group '((T/path.conj 'success)
                        (def foo
                             42)
                        'last-result-sym
                        ($.state/!.atomic '((def last-result
                                                 $/*result*)
                                            (def foo
                                                 (inc foo))
                                            [last-result foo]))
                        (T/trx '(= $/*result*
                                   ['last-result-sym 43])
                               {:description "Success and last result was accessible."})
                        (T/trx '(= foo
                                   43)
                               {:description "`foo` has been altered."})))

             (T/group '((T/path.conj 'failure)
                        (def foo
                             42)
                        'last-result-sym
                        (T/fail (fn [ex]
                                  (and (= (ex :code)
                                          :FROM-ATOMIC)
                                       (= (ex :message)
                                          ['last-result-sym 43])))
                                '($.state/!.atomic '((def last-result
                                                          $/*result*)
                                                     (def foo
                                                          (inc foo))
                                                     (fail :FROM-ATOMIC
                                                           [last-result foo])))
                                {:description "Exception is rethrown."})
                        (T/trx '(= foo
                                   42)
                               {:description "State has been restored."}))))))



(defn suite.load

  ^{:doc {:description "Loading a state."}}

  []

  (T/group '((T/path.conj 'load)

             (T/group '((T/path.conj 'with-current-state)

                        'some-result
                        ($.state/!.load-continue *state*)
                        (T/trx '(= $/*result*
                                   'some-result)
                               {:descriptionl "`!.load-continue` preserves the last result."})

                        (def a
                             1)

                        (def s
                             *state*)

                        (def b
                             2)

                        ($.state/!.load-continue s
                                                 `(def c
                                                       ~(inc b)))

                        (T/trx '(= $/*result*
                                   3)
                               {:description "Result matches provided transaction."})

                        (T/trx '(= a
                                   1)
                               {:description "`a` is still present."})

                        (T/trx '(not (defined? b))
                               {:description "`b` was not present before saving the state."})

                        (T/trx '(= c
                                   3)
                               {:description "`c` is the result from executing the given transaction."})))

             (T/group '((T/path.conj 'with-genesis-state)

                        ($.state/!.load-continue $.state/genesis
                                                 `(def s
                                                       (quote ~*state*)))

                        $
                        ($.state/!.load-continue s
                                                 $/*result*)

                        (T/trx '(= $/*result*
                                   $)
                               {:description "It looks like libraries were deployed while loading the genesis state"}))))))



(defn suite.safe

  ^{:doc {:description "Safe evaluation on a given state."}}

  []

  (T/group '((T/path.conj 'safe)

             (def foo
                  42)

             (T/group '((T/path.conj 'success)

                        (T/group '((T/path.conj 'default-address)

                                   ($.state/!.safe $.state/genesis
                                                   '(def bar
                                                         84))
                                   (let [[result-2
                                          gs-2]    $/*result*]
                                     (def result-2
                                          result-2)
                                     (def gs-2
                                          gs-2))

                                   (T/trx '(= result-2
                                              84)
                                          {:description "First transaction succeeded."})
                                   (T/trx '(not (= gs-2
                                                   $.state/genesis))
                                          {:description "State was altered."})

                                   ($.state/!.safe gs-2
                                                   '(inc bar))
                                   (let [[result-3
                                          gs-3]    $/*result*]
                                     (def result-3
                                          result-3)
                                     (def gs-3
                                          gs-3))

                                   (T/trx '(= result-3
                                              85)
                                          {:description "`foo` was indeed defined in new state."})
                                   (T/trx '(= gs-3
                                              gs-2)
                                          {:description "Second transaction did not produce any state change."})))

                        (T/group '((T/path.conj 'input-address)
                                   (def origin-address
                                        *address*)
                                   ($.state/!.safe *state*
                                                   #3
                                                   '*balance*)
                                   (T/trx '(= (first $/*result*)
                                              (balance #3))
                                          {:description "Origin address did change."})
                                   (T/trx '(= *address*
                                              origin-address)
                                          {:description "Origin address and state restored."})))))

             (T/group '((T/path.conj 'failure)
                        (T/fail.code #{:FROM-EVAL}
                                     '($.state/!.safe $.state/genesis
                                                      '(fail :FROM-EVAL
                                                             nil))
                                     {:description "Exception is propagated."})
                        (T/trx '(= foo
                                   42)
                               {:description "Original state restored."}))))))



(defn suite.tmp

  ^{:doc {:description "Executing transactions but only remembering the last result."}}

  []

  (T/group '((T/path.conj 'tmp)

             (def foo
                  42)

             (T/group '((T/path.conj 'success)
                        'last-result-sym
                        ($.state/!.tmp '((def last-result
                                              $/*result*)
                                         (def foo
                                              (inc foo))
                                         (def bar
                                              (inc foo))
                                         [last-result (inc bar)]))
                        (def result
                             $/*result*)
                        (T/trx '(= (first result)
                                   'last-result-sym)
                               {:description "Access to the last result."})
                        (T/trx '(= (second result)
                                   45)
                               {:description "Computation based on `foo` is correct."})
                        (T/trx '(= foo
                                   42)
                               {:description "`foo` remains unchanged."})
                        (T/trx '(not (defined? bar))
                               {:description "`bar` does not exist anymore."})))

             (T/group '((T/path.conj 'failure)
                        'last-result-sym
                        (T/fail (fn [ex]
                                  (and (= (ex :code)
                                          :FROM-TMP-STATE)
                                       (= (ex :message)
                                          ['last-result-sym 43])))
                                '($.state/!.tmp '((def last-result
                                                       $/*result*)
                                                  (def foo
                                                       (inc foo))
                                                  (fail :FROM-TMP-STATE
                                                        [last-result foo])))
                                {:description "Exception is rethrown."})
                        (T/trx '(= foo
                                   42)
                               {:description "`foo` remains unchanged."}))))))



(defn suite.tmp-with

  ^{:doc {:description "Executing transactions with a temporary state."}}

  []

  (T/group '((T/path.conj 'tmp.with)
             
             (def foo
                  42)

             (T/group '((T/path.conj 'success)
                        'last-result-sym
                        ($.state/!.tmp-with $.state/genesis
                                            '([$/*result* (defined? foo)]))
                        (T/trx '(= $/*result*
                                   ['last-result-sym false])
                               {:description "Input state was successfully loaded with access to the last result."})
                        (T/trx '(= foo
                                   42)
                               {:description "Original state restored."})))

             (T/group '((T/path.conj 'failure)
                        'last-result-sym
                        (T/fail (fn [ex]
                                  (and (= (ex :code)
                                          :FROM-TMP-STATE)
                                       (= (ex :message)
                                          ['last-result-sym false])))
                                '($.state/!.tmp-with $.state/genesis
                                                     '((fail :FROM-TMP-STATE
                                                             [$/*result* (defined? foo)])))
                                {:description "Exception rethrown."})
                        (T/trx '(= foo
                                   42)
                               {:description "Original state restored."}))))))


;;;


(defn suite.main

  ^{:doc {:description "Suite gathering all other suites."}}

  []

  (T/group '((T/path.conj 'convex.shell.state)
             (suite.load)
             (suite.safe)
             ;; Higher-level constructs based on state loading.
             (suite.atomic)
             (suite.tmp)
             (suite.tmp-with))))

;;;


(suite.main)
(T/print "convex.shell.state")
