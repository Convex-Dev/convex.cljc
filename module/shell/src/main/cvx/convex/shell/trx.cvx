

(call *registry*
      (cns-update 'convex.shell.trx
                  *address*))


(call *registry*
      (register {:description ["Utilities for manipulating the list of transactions pending for execution."
                               "Used by other libraries for a varity of features since this ability provides very powerful metaprogramming."]
                 :name        "Transaction handling library for the Convex Shell"}))


;;;;;;;;;; Private values


(def -self

  ^{:doc      {:description "Address to this library."}
    :private? true}

  *address*)


;;;;;;;;;; Public values


(def *list*

  ^{:doc {:description ["List of transactions pending for execution."
                        "This list can be altered for many different reasons, from instrumentation to halting."
                        "See `set` and other functions from this account."]}}

  '())


;;;;;;;;;; API


(defn set

  ^{:callable? true
    :doc       {:description ["Replaces `*list*` with the given list of transactions."
                              "Low-level, most of the time other functions such as `precat` are used."]
                :examples    [{:code "($.trx/set '((def foo 42) ($.stream/!.outln [:foo foo])))"}]
                :signature   [{:params [trx+]}]}}

  [trx+]

  (if (= *address*
         -self)
    (def *list*
         (do
           (assert (list? trx+))
           trx+))
    (call -self
          (set trx+))))


;;;


(defn halt

  ^{:doc {:description "Empties `*list*`, and since there will be no transactions to execute anymore, program will halt."
          :examples    [{:code "($.trx/halt)"}]
          :signature   [{:params []}]}}

  []

  (set '()))



(defn precat

  ^{:doc {:description ["Replaces `*list*` with the concatenation of `trx+` and the current value of `*list*`."
                        "Must be a list as well."]
          :examples    [{:code "($.trx/precat '((def foo 42) ($.stream/!.outln [:foo foo])))"}]
          :signature   [{:params [trx+]}]}}

  [trx+]

  (set (concat trx+
               *list*)))



(defn prepend

  ^{:doc {:description "Prepends `trx` to `*list*`, in first position, so that it is executed right after the current transaction."
          :examples    [{:code "($.trx/prepend '(def foo 42))"}]
          :signature   [{:params [trx]}]}}

  [trx]

  (set (cons trx
             *list*)))
