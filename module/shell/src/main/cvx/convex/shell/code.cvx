(call *registry*
      (cns-update 'convex.shell.code
                  *address*))


(call *registry*
      (register {:description "Utilities for handling code."
                 :name        "Code handling library for the Convex Shell"}))


;;;;;;;;;; Private values


(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))


;;;;;;;;;; Genereting hygenic


(def -*gensym*

  ^{:private? true}

  0)



(defn gensym

  ^{:callable? true
    :doc       {:description ["Returns a symbol guaranteed to be unique relative to other symbols generated"
                              "with this function in the context of a single process."
                              ""
                              "A prefix string may be provided (default to \"G_\")."
                              ""
                              "Useful for metaprogramming."]
                :examples    [{:code "($.code/gensym)"}
                              {:code "($.code/gensym \"some-prefix-b\")"}]
                :signature   [{:params []}
                              {:params [prefix]}]}}

  
  ([]

   (gensym nil))


  ([prefix]

   (if (= *address*
          ~*address*)
     (do
       (let [id -*gensym*]
         (def -*gensym*
              (inc id))
         (symbol (str (or prefix
                          "G_")
                      id))))
     (call ~*address*
           (gensym prefix)))))


;;;;;;;;;; Requests


(defn !.decompile

  ^{:doc {:description ["Compiles the given cell, such as a function, into data."
                        "Uses `$.code/read+`."
                        ""
                        "Result will be availabe during next transaction under `$/*result*`."
                        ""
                        "Experimental! Currently, cells containing local bindings are not eval-ready (eg. functions)."]
          :examples    [{:code "($.code/!.decompile (fn [x] (inc x)))"}]
          :signature   [{:params [cell]}]}}

  [cell]

  ($.trx/precat `(($.code/!.read+ ~(str cell))
                  (first $/*result*))))



(defn !.read+

  ^{:doc {:description ["Passes the given string through the Convex Lisp reader and produces a list of cells."
                        "Those cells can be compiled, evaluated, ..."
                        "Result is available during next transaction under `$/*result*`."]
          :examples    [{:code "($.code/!.read+ \"(+ 2 2)\")"}]
          :signature   [{:params [src]}]}}

  [src]

  (assert (str? src))
  [:cvm.sreq :code.read+ src])
