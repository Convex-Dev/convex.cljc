(call *registry*
      (cns-update 'convex.shell.process
                  *address*))


(call *registry*
      (register {:description "Process-related utilities, such as reading environment variables."
                 :name        "Process library for the Convex Shell"}))


;;;;;;;;;;


(defn !.env

  ^{:doc {:description ["Returns a request for retrieving environment variables for the current process."
                        "Useful when some information must be passed to the shell from the outside."
                        "When a environment variable is given as well, retrieves only the value for that variable."
                        "Otherwise, whole map of variables and their values is retrieved."
                        "Result will be available during next transaction under `$/*result*`."]
          :examples    [{:code "($.process/!.env}"}
                        {:code "(s.process/!.env \"MY_X\")"}]
          :signature   [{:params [sym]}
                        {:params [sym env-var]}]}}


  ([]

   (!.env nil))


  ([env-var]

   (assert (or (str? env-var)
               (nil? env-var)))
   [:cvm.sreq :process.env env-var]))



(defn !.exit

  ^{:doc {:description ["Returns a requestion for terminating the process with `exit-code` (long between 0 and 255 inclusive)."
                        "By convention, a non-zero value means an error occured."
                        ""
                        "Meaning of default exit codes used by the Convex Shell:"
                        ""
                        "  1  Fatal error"
                        "  2  Unhandled CVM exception"
                        "  3  Using STDERR failed"
                        "  4  Reading REPL input failed"]
          :examples    [{:code "($.process/!.exit 42)"}]
          :signature   [{:params [exit-code]}]}}

  [exit-code]

  (assert (and (long? exit-code)
               (<= 0
                   exit-code
                   255)))
  [:cvm.sreq :process.exit exit-code])
