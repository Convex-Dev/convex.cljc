(call *registry*
      (cns-update 'convex.shell.juice
                  *address*))


(call *registry*
      (register {:name "Juice utilities for the Convex Shell"}))


;;;;;;;;;; Private values


(def $.code

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.code)))



(def $.state

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.state)))


;;;;;;;;;; Public


(defn !.limit

  ^{:doc {:description ["Returns a request for retrieving the default juice limit per transaction."
                        "Result will be available during the next transaction under `$/*result*`."]
          :examples    [{:code "($.juice/!.limit)"}]
          :signature   [{:params []}]}}

  []

  [:cvm.sreq :juice.limit])



(defn !.limit.set

  ^{:doc {:description ["Returns a request for setting the default juice limit per transaction."
                        "Minimum limit is 100K units."
                        "A nil limit will reset it to the highest long value."
                        ""
                        "Most users should not have to worry about setting the juice limit. It is"
                        "mostly a defence mechanism for failing on potential infinite loops and such"
                        "matters."]
          :examples    [{:code "($.juice/!.limit.set 2000000)"}]
          :signature   [{:params [limit]}]}}

  ;; Limit should never be to low so that it would break the REPL or
  ;; other core aspects like the top error handler in `$.catch`.

  [limit]

  (assert (or (nil? limit)
              (and (long? limit)
                   (>= limit
                       100000))))
  [:cvm.sreq :juice.limit.set limit])



(defn !.track

  ^{:doc {:description ["Returns a request for tracking the juice consumption of the given transaction."
                        ""
                        "End result is a vector where the first item is the number of units of juice"
                        "consumed by the transaction and the second item is the result of the transaction."
                        ""
                        "It will be available during the next transaction under `$/*result*`."
                        ""
                        "All state changes are discarded, the transaction will have no effect."]
          :examples    [{:code "($.juice/!.track '(inc 42))"}
                        {:code "($.juice/!.track (compile '(inc 42)))"}]}}

  [trx]

  [:cvm.sreq :juice.track trx])



(defn !.track-steps

  ^{:doc {:description ["Uses `$.juice/!.track` successively to isolate the juice cost of expansion, compilation,"
                        "and execution."
                        ""
                        "Result is similar but the first item in the vector will be another vector:"
                        ""
                        "    [expansion-cost compilation-cost execution-cost total-cost]"]
          :examples    [{:code "($.juice/!.track-steps '(inc 42))"}
                        {:code "($.juice/!.track-steps (compile '(inc 42)))"}]}}

  [trx]

  (let [compile+exec_ ($.code/gensym)
        exec_         ($.code/gensym)
        result_       ($.code/gensym)
        total_        ($.code/gensym)
        trx_          ($.code/gensym)]
    ($.state/!.tmp `((def ~trx_
                          (quote ~trx))
                     ($.juice/!.track ~trx_)
                     (do
                       (def ~result_
                            (second $/*result*))
                       (def ~total_
                            (first $/*result*)))
                     ($.juice/!.track (expand ~trx_))
                     (def ~compile+exec_
                          (first $/*result*))
                     ($.juice/!.track (compile ~trx_))
                     (def ~exec_
                          (first $/*result*))
                     [[;; Expand
                       (- ~total_
                          ~compile+exec_)
                       ;; Compile
                       (- ~compile+exec_
                          ~exec_)
                       ;; Exec
                       ~exec_
                       ;; Total
                       ~total_]
                      ~result_]))))
