(call *registry*
      (cns-update 'convex.shell.state
                  *address*))


(call *registry*
      (register {:description ["Advanced capabilities for doing time travel, allowing to remember and restore"
                               "the whole state at given points in time."
                               "Notably useful for restoring a work session in combination with `$.db` utilities."]
                 :name        "Time travel and state utilities for the Convex Shell"}))


;;;;;;;;;; Private


(def $

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell)))



(def $.catch

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.catch)))



(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))


;;;;;;;;;; Scoped evaluation


(defn !.eval

  ^{:doc {:description ["Returns a request for evaluating the given transaction in the context of the given state."
                        ""
                        "Unlike `$.state/!.load` and variants, Convex Shell libraries will never be deployed;"
                        "The input state will not be prepared in any way and the original state will always be restored."
                        ""
                        "This might be useful when working with a state that does not come from the Convex Shell."
                        "This is also why only one transaction can be evaluated: the input state might not have"
                        "access to the Convex Shell libraries providing all the bells and whistles one is accustomed to."
                        ""
                        "An executing address may be provided. If not, the current address will be used."
                        ""
                        "The result will be available during the next transaction under `$/*result*`: a vector"
                        "where the first element is the result of the transaction and the second element is the state"
                        "after execution."]
          :examples    [{:code "($.state/!.eval some-state '(balance #3))"}
                        {:code "($.state/!.eval some-state #3 '*balance*)"}]
          :signature   [{:params [state trx]}
                        {:params [state address trx]}]}}


  ([state trx]

    (!.eval state
            nil
            trx))


  ([state address trx]

   (assert (or (nil? address)
               (address? address)))
   (let [address-2 (or address
                       *address*)]
     (when-not (>= (count (state :accounts))
                   (long address-2))
       (fail :NOBODY
             (str "Input state does not contain address: "
                  address-2)))
       [:cvm.sreq :state.eval state address-2 trx])))


;;;;;;;;;; State loading


(defn !.load

  ^{:doc {:description ["Returns a request for discarding the current state of the Convex Virtual Machine and loading the given one."
                        "Available under `*state*`, states are actually a special type of cell behaving like maps."
                        "When using functions like `assoc` on them, regular maps are returned. Such values will not work"
                        "with this request."
                        ""
                        "A common use case is saving the current state on disk with `$.db/!.root.write`, retrieving it in a later"
                        "work session using `$.db/!.root.read`, and restoring it using this request."
                        ""
                        "A transaction may be submitted as second argument. It will be executed after loading the state."
                        "Default one is `'$/*result*`so that the last result of the old state will be transferred to the new one."
                        "It is commonly used for remembering information from state to state."
                        ""
                        "All Convex Shell libraries will be deployed if they seem to be lacking."
                        ""
                        "Note that all of this is only about the state of the Convex Virtual Machine. Other resources that may have"
                        "been opened in the Convex Shell, such as file streams, will not be changed in any way."]
          :examples    [{:code "($.state/!.load *state*)"}
                        {:code "($.state/!.load *state* `(def y ~(inc x)))"}]
          :signature   [{:params [state]}
                        {:params [state trx]}]}}

  
  ([state]

   (!.load state
           `(quote ~$/*result*)))


  ([state trx]

   [:cvm.sreq :state.load state trx]))




(defn !.load-continue

  ^{:doc {:description ["Like `!.load` but the current list of transactions will replace the list of transactions"
                        "of the loaded state."
                        ""
                        "This is what is often needed. Remember that transactions to execute are stored in the"
                        "`$.trx` library, hence in an account that is part of the state."
                        "That means that loading a state without restoring current transactions will result in the"
                        "execution of transactions stored on the loaded state as opposed to the old state."
                        ""
                        "Note that this function simply reuses `!.load`. Users may imagine many different variants"
                        "as to what should happen to transactions."]
          :examples    [{:code "($.state/!.load-continue *state*)"}
                        {:code "($.state/!.load-continue *state* `(def y ~(inc x)))"}]
          :signature   [{:params [state]}
                        {:params [state trx]}]}}

  
  ([state]

   (!.load-continue state
                    `(quote ~$/*result*)))


  ([state trx]

   (!.load state
           `($.trx/set (quote ~(cons trx
                                     $.trx/*list*))))))


;;;;;;;;;; Executing several transactions with different guarantees


(defn !.atomic

  ^{:doc {:description ["Single Convex transactions are atomic: if they fail, any state change is discarded."
                        ""
                        "This function extends this behavior to multi-transactions."
                        "Before prepending the given transactions for execution, the `*state*` is remembered. In case of"
                        "an exception, the original state is restored and the exception is rethrown."
                        ""
                        "Based on `$.state/!.load`."
                        ""
                        "E.g. In the example below, an exception will be thrown and `foo` will be undefined."]
          :examples    [{:code "($.state/!.atomic '((def foo 42) (assert (< foo 1))))"}]
          :signature   [{:params [trx+]}]}}

  [trx+]

  ($.catch/!.try `($.trx/precat (cons '(quote ~$/*result*)
                                      (quote ~trx+)))
                 '{:$.state.exception $/*result*}
                 `(when-let [exception (and (map? $/*result*)
                                            ($/*result* :$.state.exception))]
                    ($.state/!.load (quote ~*state*)
                                    `($.catch/!.rethrow (quote ~exception))))))



(defn -!.tmp

  ^{:private? true}

  ;; General mechanism for executing some transactions safely and restoring to a given state.
  ;;
  ;; Exception must be rethrown explicitly because after loading, `$.catch/!.try` related transactions
  ;; are forgotten.

  [original-state result-begin trx+]

  ($.catch/!.try `($.trx/precat (cons '(quote ~result-begin)
                                      (quote ~trx+)))
                 '{:$.state.exception $/*result*}
                 `($.state/!.load (quote ~original-state)
                                  (if-let [exception (and (map? $/*result*)
                                                          ($/*result* :$.state.exception))]
                                    `($.catch/!.rethrow (quote ~exception))
                                    `(quote ~$/*result*)))))



(defn !.tmp

  ^{:doc {:description ["Remembers the current `*state*` and prepends the given transactions for execution."
                        "After executing them, the original state is restored and the last `$/*result*` is transferred."
                        ""
                        "Useful for computing a result and erasing any state change it might have caused."
                        ""
                        "In case of an exception, behaves like `$.state/!.atomic`."
                        ""
                        "Based on `$.state/!.load`."]
          :examples    [{:code "($.state/!.tmp '((def foo 42) (inc foo)))   (and (= $/*result* 43) (not (defined? foo)))"}]
          :signature   [{:params [trx+]}]}}

  [trx+]

  (-!.tmp *state*
          $/*result*
          trx+))



(defn !.tmp-with

  ^{:doc {:description ["Like `$.state/!.tmp` but the first argument is a state to load temporarily"
                        "as oppposed to using the current `*state*`."
                        "After the given transactions are executed, the original `*state*` is restored."]
          :examples    [{:code "($.state/!.tmp-with some-state '(*balance*)"}]
          :signature   [{:params [state trx+]}]}}

  [state trx+]

  (!.load-continue state
                   `($.state/-!.tmp (quote ~*state*)
                                    (quote ~$/*result*)
                                    (quote ~trx+))))
