(call *registry*
      (cns-update 'convex.shell.time
                  *address*))


(call *registry*
      (register {:description ""
                 :name        "Convex Shell time utilities"}))


;;;;;;;;;; Private values


(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))


;;;;;;;;;; State timestamp


(defn !.advance

  ^{:doc {:description ["Returns a request for advancing `*timestamp*` (state timestamp) by `millis` milliseconds."
                        "Argument must be > 0."
                        "Great match for the standard `schedule` macro."]
          :examples    [{:code "($.time/!.advance (* 60 60 1000))"}]
          :signature   [{:params [millis]}]}}

  [millis]

  (assert (>= millis
              0))
  [:cvm.sreq :time.advance millis])


;;;;;;;;;; Machine clock


(defn !.iso

  ^{:doc {:description ["Prepends requests for producing the current date-time in ISO 8601 UTC format."
                        ""
                        "Result will be available under `$/*result*` during the next transaction."]
          :examples    [{:code "($.time/!.iso)"}]
          :signature   [{:params []}]}}
  []

  ($.trx/precat '(($.time/!.unix)
                  ($.time/!.unix->iso $/*result*))))



(defn !.nano

  ^{:doc {:description ["Returns a request for retrieving the current value of a high-resolution timer."
                        "Result in nanoseconds will be available under `$/*result*` during the next transaction."
                        ""
                        "Guarantees:"
                        ""
                        "  - Timer is monotonic if the OS supports it"
                        "  - Resolution is at least as good as that of `$.time/!.unix`"
                        ""
                        "Useful for timing things as it is usually more reliable than `$.time/!.unix`."
                        "This timer has no particular, predictable origin. Hence the first value is meaningless."
                        "However, the difference between 2 values from the same process offers a precise interval."
                        "It follows that values from different process are not comparable."]
          :examples    [{:code "($.time/!.nano)"}]
          :signature   [{:params []}]}}

  []

  [:cvm.sreq :time.nano])



(defn !.unix

  ^{:doc {:description ["Returns a request for retrieving the current Unix timestamp in milliseconds."
                        "This reflects the machine's clock, not `*timestamp*` (state timestamp)."
                        "Resolution depends on the OS."
                        ""
                        "Result will be available under `$/*result*` during the next transaction."
                        ""
                        "For timing things, prefer `$.time/!.nano`."]
          :examples    [{:code "($.time/!.unix)"}]
          :signature   [{:params []}]}}

  []

  [:cvm.sreq :time.unix])


;;;;;;;;;; Conversions


(defn !.iso->unix

  ^{:doc {:description ["Returns a request for converting an ISO 8601 UTC date-time string into a Unix timestamp."
                        ""
                        "Result will be available under `$/*result*` during the next transaction."]
          :examples    [{:code "($.time/!.iso->unix \"2022-09-14T11:43:34.633\")"}]
          :signature   [{:params [iso-string]}]}}

  [iso-string]

  (assert (str? iso-string))
  [:cvm.sreq :time.iso->unix iso-string])


(defn !.unix->iso

  ^{:doc {:description ["Returns a request for converting a Unix timestamp into an ISO 8601 UTC date-time string."
                        ""
                        "Result will be available under `$/*result*` during the next transaction."]
          :examples    [{:code "($.time/!.unix->iso 1663155814633)"}]
          :signature   [{:params [unix-timestamp]}]}}

  [unix-timestamp]

  (assert (long? unix-timestamp))
  [:cvm.sreq :time.unix->iso unix-timestamp])
