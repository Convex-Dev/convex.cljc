(call *registry*
      (cns-update 'convex.shell.test
                  *address*))

(call *registry*
      (register {:description ["Provides a flexible framework for unit testing where each assertion is a transaction."
                               "Central function for testing assertions is `trx`."
                               "Functions `fail` and `fail.code` are used to ensure expected failures."
                               "Those functions generate a report for each test and those reports are appended to `*report+*`."
                               "When done, reports can be printed using `print` and cleared using `report.clear`."
                               "For testing groups of assertions safely without altering global state, see `group`."
                               "Each assertion can receive metadata which is added to its report."
                               "For filtering assertions and preventing execution based on metadata, see `filter.set`."]
                 :name        "Unit testing library for the Convex Shell"}))


;;;;;;;;;; Importing libraries


(def $

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell)))



(def $.catch

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.catch)))



(def $.process

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.process)))



(def $.stream

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.stream)))



(def $.state

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.state)))



(def $.term

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.term)))



(def $.trx

  ^{:private? true}

  (call *registry*
        (cns-resolve 'convex.shell.trx)))


;;;;;;;;;; Static private values


(def -self

  ^{:doc      {:description "Reference to this library's address."}
    :private? true}

  *address*)


;;;;;;;;;; Altering tests reports


(def *n-fail*

  ^{:doc {:description "Number of currently failed tests."}}

  0)



(def *report+*

  ^{:doc {:description ["Vector of currently collected test reports."
                        "Also see `report.conj`"]}}

  [])



(defn report.clear

  ^{:callable? true
    :doc       {:description ["Erases all test reports."
                              "See `*report+*`."]
                :examples    [{:code "($.test/report.clear)"}]
                :signature   [{:params []}]}}

  []

  (if (= *address*
         -self)
    (do
      (def *n-fail*
           0)
      (def *report+*
           []))
    (call -self
          (report.clear)))
  nil)



(defn report.conj

  ^{:callable? true
    :doc       {:description ["Low-level function for adding a new report to `*report+*`."
                              "A report summarizes a test assertion."
                              "If strictly required, study the `fail` and `trx` symbols which rely on this function."]
                :signature   [{:params [report]}]}}

  [report]

  (if (= *address*
         -self)
     (do
       (when-not (:pass? report)
         (def *n-fail*
              (inc *n-fail*)))
       (def *report+*
            (conj *report+*
                  (assoc report
                         :metadata
                         (assoc (:metadata report)
                                :path
                                *path*)))))
    (call -self
          (report.conj report))))



(defn report.merge

  ^{:callable? true
    :doc       {:description ["Low-level function for merging the given argument into `*n-fail*` and `*report+*`."
                              "Used by `group` for remembering tests reults after restoring previous state."]
                :signature   [{:params [n-fail report+]}]}}

  [n-fail report+]

  (if (= *address*
         -self)
    (do
      (def *n-fail*
           (+ *n-fail*
              n-fail))
      (def *report+*
           (concat *report+*
                   report+)))
    (call -self
          (report.merge n-fail
                        report+))))


;;;;;;;;;; Filtering tests


(def *filter*

  ^{:doc {:description ["User defined function for filtering tests based on their metadata."
                        "See `filter.set`."]}}

  nil)



(defn filter.allow?

  ^{:doc {:description ["Returns a boolean indicating if a test should be executed based on its metadata."
                        "Low-level functions used by `trx` and similar."
                        "See `*filter*`."]
          :signature   [{:params [metadata]}]}}

  [metadata]

  (if *filter*
    (*filter* metadata)
    true))



(defn filter.set

  ^{:callable? true
    :doc       {:description ["Sets `*filter*`."
                              "Function must take metadata and return nil or false if test must be ignored."
                              "Providing nil removes current filter."]
                :examples    [{:code "($.test/filter.set (fn [meta] (not (:slow meta))))"}]
                :signature   [{:params [f]}]}}

  [f]

  (if (= *address*
        -self)
    (do
      (assert (or (fn? f)
                  (nil? f)))
      (def *filter*
           f))
    (call -self
          (filter.set f))))


;; DEFAULT METADATA


(def *meta*

  ^{:doc {:description ["User defined function for altering metadata."
                        "Altering happens before filtering. See `*filter*`."
                        "Typically used in transactions enclosed by `group`."
                        "See `meta.set`."]}}

  nil)



(defn meta.map

  ^{:doc {:description "Maps `metadata` using `*meta*` if it is set to a function."
          :signature   [{:params [metadata]}]}}

  [metadata]

  (if *meta*
    (*meta* metadata)
    metadata))



(defn meta.set

  ^{:callable? true
    :doc       {:description ["Sets `*meta*`."
                              "Function must takes metadata and returns new metadata."
                              "Providing nil removes the current function."]
                :examples    [{:code "($.test/meta.set (fn [meta] (assoc meta :important? true)))"}]
                :signature   [{:params [f]}]}}

  [f]

  (if (= *address*
         -self)
    (do
      (assert (or (fn? f)
                  (nil? f)))
      (def *meta*
           f))
    (call -self
          (meta.set f))))


;;;;;;;;;; Test path, abstraction helping in locating a test


(def *path*

  ^{:doc {:description ["Vector of arbitrary values that helps locating a reported test."
                        "Current value is attached to test report under `:path` in `:metadata`."
                        "Item is added using `path.conj`."]}}

  [])



(defn path.conj

  ^{:callable? true
    :doc       {:description "Adds an arbitrary item to `*path*`."
                :examples    [{:code "($.test/path.conj 'my.test.suite)"}]
                :signature   [{:params [item]}]}}

  [item]

  (if (= *address*
         -self)
    (def *path*
         (conj *path*
               item))
    (call -self
          (path.conj item))))


;;;;;;;;;; Time travel and global state management


(defn group

  ^{:doc {:description ["Executes the given transactions using `$.state/!.tmp`, meaning that any state change"
                        "will be reversed afterwards with the exceptions of assertion results."
                        ""
                        "This is a way to scope related transactions ensuring that any changes but test results"
                        "are discared."]
          :examples    [{:code "($.test/group '((def foo 42) ($.test/trx '(= 42 foo))))"}]
          :signature   [{:params [trx+]}]}}

  [trx+]

  ($.catch/!.safe
    `($.state/!.tmp (concat '(($.test/report.clear))
                            (quote ~trx+)
                            '([$.test/*n-fail*
                               $.test/*report+*])))
    nil
    '(when-not (and (map? $/*result*)
                    ($/*result* :exception?))
       (apply $.test/report.merge
              $/*result*))))


;;;;;;;;;; Testing transactions


(defn fail

  ^{:doc {:description ["Tests that the given `trx` quoted transaction throws an exception."
                        "If no exception is thrown, test fails."
                        "If an exception is thrown, it is passed to the `expected-fail?` function."
                        "Returning true means the exception was as expected, meaning test passes."
                        "Most of the time, the higher-level `fail.code` function will be used rather than this one."
                        "See `trx` from this library for metadata and how execution is done."]
          :examples    [{:code "($.test/fail (fn [ex] (= \"Bar\" (:message ex))) '(fail :foo \"Bar\"))"}]
          :signature   [{:params [expected-fail? trx]}
                        {:params [expected-fail? trx metadata]}]}}


  ([expected-fail? trx]

   (fail expected-fail?
         trx
         nil))


  ([expected-fail? trx metadata]

   (let [metadata-2 (meta.map metadata)]
     (when (filter.allow? metadata-2)
       (let [base-report {:expect   :exception
                          :metadata metadata-2
                          :trx      (list 'quote
                                          trx)}]
         ($.catch/!.safe ;; Try
                         `($.trx/precat '((quote ~$/*result*)
                                        ~trx
                                        (~-self/report.conj (assoc ~base-report
                                                                   :result $/*result*
                                                                   :passe? false))))
                         ;; Catch                                          
                         `(~-self/report.conj (assoc ~base-report
                                                     :exception (lookup ~$
                                                                        *result*)
                                                     :pass?     (= (~expected-fail? $/*result*)
                                                                   true)))))))))



(defn fail.code

  ^{:doc {:description ["Like the `fail` function but `expected-code?` receives the exception's code."
                        "A convenient solution is to use a set of expected codes since sets are functions as well."]
          :examples    [{:code "($.test/fail.code #{:ASSERT} '(assert (< 42 3)))"}]
          :signature   [{:params [code-target trx]}
                        {:params [code-target trx metadata]}]}}


  ([code-target trx]

   (fail.code code-target
              trx
              nil))


  ([code-target trx metadata]

   (fail (fn [ex]
           (code-target (ex :code)))
         trx
         (assoc metadata
                :code-target
                code-target))))


(defn trx

  ^{:doc {:description ["Tests that the `trx` (a quoted form) return exactly true."
                        "Any other value means the transaction failed."
                        "Result is reported using `conj.report`."
                        "Metadata is an arbitrary map associated under `:metadata` in the report, used for filtering and providing extra information."
                        "It is advised to provide at least `:description`, a human-readable string explaining the test."]
          :examples    [{:code "($.test/trx '(< 2 3) {:description \"Two should be lesser than three.\"})"}]
          :signature   [{:params [trx]}
                        {:params [trx metadata]}]}}


  ([trx]

   (-self/trx trx
              nil))


  ([trx metadata]

   (let [metadata-2 (meta.map metadata)]
     (when (filter.allow? metadata-2)
       (let [base-report {:expect   :result
                          :metadata metadata-2
                          :trx      (list 'quote
                                          trx)}]
         ($.catch/!.safe ;; Try
                         `($.trx/precat '((quote~ $/*result*)
                                        ~trx
                                        (~-self/report.conj (assoc ~base-report
                                                                   :result $/*result*
                                                                   :pass?  (= $/*result*
                                                                              true)))))
                         ;; Catch
                         `(~-self/report.conj (assoc ~base-report
                                                     :exception $/*result*
                                                     :pass?     false))))))))


;;;;;;;;;; Tracing


(defmacro is

  ^{:doc {:description ["Macro for tracing the given `form`: it it does not return true, result is returned as well as arguments."
                        "Assumes `form` is a function call."
                        "Can be useful when a test is failing in an opaque fashion."]
          :examples    [{:code "($.test/is '(= a (+ b c)))"}]
          :signature   [{:params [form]}]}}

  [form]

  (let [n-arg (dec (count form))]
    (if (> n-arg
           0)
      `(let [arg+ ~(vec (next form))
             res  (apply ~(first form)
                         arg+)]
         (or (= res
                true)
             (list '=
                   res
                   (cons (quote ~(first form))
                         arg+))))
      form)))


;;;;;;;;;; Reporting


(defn exit

  ^{:doc {:description "Uses `$.process/exit` to terminate process with a non-zero status if `(> *n-fail* 0)`."
          :examples    [{:code "($.test/exit)"}]
          :signature   [{:params []}]}}

  []

  ($.process/!.exit (if (> *n-fail*
                           0)
                      42
                      0)))



(defn -print.fail

  ^{:doc      {:description "Used for printing test reports when some assertions failed."
               :signature   [{:params [n-fail report+]}]}
    :private? true}

  [n-fail report+]

  (let [acc (reduce (fn [acc report]
                      (if (:pass? report)
                        acc
                        (let [metadata (report :metadata)
                              ex       (dissoc (report :exception)
                                               :trx)
                              res      (report :result)
                              res?     (contains-key? report
                                                      :result)
                              [text
                               data]   (if (= (report :expect)
                                              :result)
                                         (if res?
                                           ["Returned:"
                                            res]
                                           ["Thrown:"
                                            ex])
                                         (if res?
                                           ["Instead of exception:"
                                            res]
                                           ["Not predicted exception:"
                                            ex]))]
                          (conj acc
                                "---"
                                $/line
                                $/line
                                ($.term/bold)
                                (report :trx)
                                ($.term/reset)
                                $/line
                                $/line
                                ($.term/bold)
                                ($.term/fg.blue)
                                text
                                ($.term/reset)
                                $/line
                                "  "
                                data
                                $/line
                                ($.term/bold)
                                ($.term/fg.blue)
                                "Path:"
                                ($.term/reset)
                                $/line
                                "  "
                                (:path metadata)
                                $/line
                                ($.term/bold)
                                ($.term/fg.blue)
                                "Description:"
                                ($.term/reset)
                                $/line
                                "  "
                                (or (:description metadata)
                                    "Not provided.")
                                ($.term/bold)
                                ($.term/fg.blue)
                                $/line
                                "Other metadata: "
                                ($.term/reset)
                                $/line
                                "  "
                                (dissoc metadata
                                        :description
                                        :path)
                                $/line
                                $/line
                                ))))
                      []
                      report+)]
    (conj acc
          $/line
          "==="
          $/line
          $/line
          ($.term/bold)
          ($.term/fg.red)
          "Number of failed tests: "
          ($.term/reset)
          n-fail
          " / "
          (count report+))))



(defn -print.success

  ^{:doc      {:description "Used for printing test reports when all assertions passed."
               :signature   [{:params [report+]}]}
    :private? true}

  [report+]

  (let [acc [$/line
             "==="
             $/line
             $/line
             ($.term/bold)]]
    (if (empty? report+)
      (conj acc
            ($.term/fg.red)
            "No test reports.")
      (conj acc
            ($.term/fg.green)
            "All tests passed."))))



(defn print

  ^{:doc {:description ["Uses `$.stream/!.txt.outln` to print current test reports in human-redable format."
                        "Afterwards, it is typically a good idea using `report.clear`, especially if more test will be run."
                        "Name is simply used at the end of the report for identifying that report."]
          :examples    [{:code "($.test/print 'my.lib)"}]
          :signature   [{:params [name]}]}}


  ([name]

   (print name *n-fail*
          *report+*))


  ([name n-fail report+]

   ($.stream/!.txt.outln
    (apply str
           (conj (if (zero? n-fail)
                   (-print.success report+)
                   (-print.fail n-fail
                                report+))
                 ($.term/reset)
                 $/line
                 $/line
                 "Tested '"
                 name
                 "'.")))))
